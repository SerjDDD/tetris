{"version":3,"sources":["constants.ts","components/tetris/index.tsx","components/tetris/components/field/index.tsx","components/tetris/components/wins/index.tsx","components/tetris/components/box/index.tsx","components/tetris/components/score/index.tsx","components/tetris/components/lines/index.tsx","components/tetris/components/level/index.tsx","components/tetris/components/next/index.tsx","components/tetris/components/rate/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Keys","Tetrominos","SCORES","TetrisPanelPosition","TR","TETROMINOS","_TETROMINOS","Object","defineProperty","I","J","L","O","S","T","Z","NULL_SHAPE","TetrisField","field","this","props","react","className","cellSpacing","cellPadding","map","line","lineIndex","key","concat","cell","cellIndex","cellClassName","classNames","tetris-field-cell","cell-i","cell-j","cell-l","cell-o","cell-s","cell-t","cell-z","cell-null","React","TetrisWins","role","aria-label","TetrisBox","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","tetrisBoxElement","updateDimensions","bind","assertThisInitialized","state","height","width","_this2","setState","prevState","current","undefined","adjustSize","style","window","getComputedStyle","computedHeight","parseInt","getPropertyValue","computedWidth","addEventListener","removeEventListener","_this$props","color","flex","_this$state","borderColor","ref","children","TetrisScore","score","box_TetrisBox","String","prototype","padStart","TetrisLines","lines","TetrisLevel","level","TetrisNext","tetromino","field_TetrisField","marginTop","TetrisRate","burn","iago","rate","Tetris","tetrisElement","framesCount","generateField","getFieldWithActiveTetromino","removeLines","calculateScore","getCurrentLevel","getActiveTetrominoShape","getNextTetrominoShape","getRandomTetromino","createTetromino","getBufferLeft","getBufferRight","getBufferDown","moveLeft","moveRight","moveDown","rotateLeft","rotateRight","shiftTetromino","hasOverlaps","keyPressed","getFramesPerLevel","processFrame","play","stop","pause","adjustFieldSize","adjustNextTetrominoSize","startLevel","nextTetromino","paused","tetrisLines","fieldHeight","fieldWidth","Array","fill","tetrominoShape","y","length","x","emptyField","fieldLines","filter","every","_this$state2","removedLines","updatedField","toConsumableArray","reverse","slice","updatedLines","updatedTetrisLines","updatedLevel","a","b","Math","max","diference","min","floor","type","index","random","shape","reduce","acc","offset","findIndex","buffer","i","objectSpread","availableBuffer","_this3","_this4","_this5","lastShape","_this6","leftBuffer","rightBuffer","li","j","lj","fieldCell","event","keyCode","ENTER","SELECT","LEFT","RIGHT","UP","DOWN","ROTATE_LEFT","ROTATE_RIGHT","_this$state3","framesLimit","requestAnimationFrame","_this7","_this$state4","newTetromino","_this$state5","trate","round","wins_TetrisWins","score_TetrisScore","next_TetrisNext","level_TetrisLevel","lines_TetrisLines","rate_TetrisRate","App","react_default","createElement","tetris_Tetris","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79510a22.chunk.js","sourcesContent":["export const FIELD_HEIGHT: number = 20;\nexport const FIELD_WIDTH: number = 10;\n\nexport const SCORE_1LINE: number = 40;\nexport const SCORE_2LINES: number = 100;\nexport const SCORE_3LINES: number = 300;\nexport const SCORE_TETRIS: number = 1200;\n\nexport const SCORES: number[] = [\n    SCORE_1LINE,\n    SCORE_2LINES,\n    SCORE_3LINES,\n    SCORE_TETRIS,\n];\n\nexport enum Keys {\n    UP = 38,\n    DOWN = 40,\n    LEFT = 37,\n    RIGHT = 39,\n    ROTATE_LEFT = 90,\n    ROTATE_RIGHT = 88,\n    SELECT = 16,\n    ENTER = 13,\n}\n\nexport enum Tetrominos {\n    I,\n    J,\n    L,\n    O,\n    S,\n    T,\n    Z,\n}\n\nexport const TETROMINOS_COUNT = 7;\nexport const TETROMINOS_SHAPE_SIZE = 4;\n\nexport type TetrominoShape = (Tetrominos | null)[][];\nexport type TetrominoShapes = TetrominoShape[];\n\nexport interface TetrominosMap {\n    [Tetrominos.I]: TetrominoShapes;\n    [Tetrominos.J]: TetrominoShapes;\n    [Tetrominos.L]: TetrominoShapes;\n    [Tetrominos.O]: TetrominoShapes;\n    [Tetrominos.S]: TetrominoShapes;\n    [Tetrominos.T]: TetrominoShapes;\n    [Tetrominos.Z]: TetrominoShapes;\n}\n\nconst TR = Tetrominos;\nexport const TETROMINOS: TetrominosMap = {\n    [Tetrominos.I]: [\n        [\n            [TR.I, TR.I, TR.I, TR.I],\n            [null, null, null, null],\n            [null, null, null, null],\n            [null, null, null, null],\n        ],\n        [\n            [null, TR.I, null, null],\n            [null, TR.I, null, null],\n            [null, TR.I, null, null],\n            [null, TR.I, null, null],\n        ],\n    ],\n    [Tetrominos.J]: [\n        [\n            [TR.J, null, null, null],\n            [TR.J, TR.J, TR.J, null],\n            [null, null, null, null],\n            [null, null, null, null],\n        ],\n        [\n            [null, TR.J, TR.J, null],\n            [null, TR.J, null, null],\n            [null, TR.J, null, null],\n            [null, null, null, null],\n        ],\n        [\n            [TR.J, TR.J, TR.J, null],\n            [null, null, TR.J, null],\n            [null, null, null, null],\n            [null, null, null, null],\n        ],\n        [\n            [null, TR.J, null, null],\n            [null, TR.J, null, null],\n            [TR.J, TR.J, null, null],\n            [null, null, null, null],\n        ],\n\n    ],\n    [Tetrominos.L]: [\n        [\n            [null, null, TR.L, null],\n            [TR.L, TR.L, TR.L, null],\n            [null, null, null, null],\n            [null, null, null, null],\n        ],\n        [\n            [null, TR.L, null, null],\n            [null, TR.L, null, null],\n            [null, TR.L, TR.L, null],\n            [null, null, null, null],\n        ],\n        [\n            [TR.L, TR.L, TR.L, null],\n            [TR.L, null, null, null],\n            [null, null, null, null],\n            [null, null, null, null],\n        ],\n        [\n            [TR.L, TR.L, null, null],\n            [null, TR.L, null, null],\n            [null, TR.L, null, null],\n            [null, null, null, null],\n        ],\n\n    ],\n    [Tetrominos.O]: [\n        [\n            [null, TR.O, TR.O, null],\n            [null, TR.O, TR.O, null],\n            [null, null, null, null],\n            [null, null, null, null],\n        ],\n    ],\n    [Tetrominos.S]: [\n        [\n            [null, TR.S, TR.S, null],\n            [TR.S, TR.S, null, null],\n            [null, null, null, null],\n            [null, null, null, null],\n        ],\n        [\n            [null, TR.S, null, null],\n            [null, TR.S, TR.S, null],\n            [null, null, TR.S, null],\n            [null, null, null, null],\n        ],\n    ],\n    [Tetrominos.T]: [\n        [\n            [null, TR.T, null, null],\n            [TR.T, TR.T, TR.T, null],\n            [null, null, null, null],\n            [null, null, null, null],\n        ],\n        [\n            [null, TR.T, null, null],\n            [null, TR.T, TR.T, null],\n            [null, TR.T, null, null],\n            [null, null, null, null],\n        ],\n        [\n            [TR.T, TR.T, TR.T, null],\n            [null, TR.T, null, null],\n            [null, null, null, null],\n            [null, null, null, null],\n        ],\n        [\n            [null, TR.T, null, null],\n            [TR.T, TR.T, null, null],\n            [null, TR.T, null, null],\n            [null, null, null, null],\n        ],\n    ],\n    [Tetrominos.Z]: [\n        [\n            [TR.Z, TR.Z, null, null],\n            [null, TR.Z, TR.Z, null],\n            [null, null, null, null],\n            [null, null, null, null],\n        ],\n        [\n            [null, null, TR.Z, null],\n            [null, TR.Z, TR.Z, null],\n            [null, TR.Z, null, null],\n            [null, null, null, null],\n        ],\n    ],\n};\n\nexport const NULL_SHAPE: TetrominoShape = [\n    [null, null, null, null],\n    [null, null, null, null],\n    [null, null, null, null],\n    [null, null, null, null],\n]\n","import * as React from 'react';\nimport TetrisField from './components/field';\nimport TetrisWins from './components/wins';\nimport { Tetrominos, FIELD_HEIGHT, FIELD_WIDTH, TetrominoShape, NULL_SHAPE, TETROMINOS, TETROMINOS_COUNT, Keys, TETROMINOS_SHAPE_SIZE, SCORES } from '../../constants';\nimport TetrisScore from './components/score';\nimport TetrisLines from './components/lines';\nimport TetrisLevel from './components/level';\nimport './styles.css';\nimport TetrisBox from './components/box';\nimport TetrisNext from './components/next';\nimport TetrisRate from './components/rate';\n\nexport enum TetrisPanelPosition {\n    LEFT,\n    RIGHT,\n};\n\nexport interface TetrisProps {\n    fieldHeight: number;\n    fieldWidth: number;\n    panelPosition?: TetrisPanelPosition;\n    startLevel: number;\n};\n\ninterface ActiveTetromino {\n    type: Tetrominos;\n    state: number;\n    x: number;\n    y: number;\n}\n\ninterface TetrisState {\n    burn: number;\n    field: TetrominoShape;\n    iago: number;\n    level: number;\n    lines: number;\n    nextTetromino: Tetrominos | null;\n    paused: boolean;\n    score: number;\n    tetrisLines: number;\n    tetromino: ActiveTetromino | null;\n};\n\nexport default class Tetris extends React.PureComponent<TetrisProps, TetrisState> {\n\n    private readonly tetrisElement: React.RefObject<HTMLElement>;\n    private framesCount: number = 0;\n\n    constructor(props: Readonly<TetrisProps>) {\n\n        super(props);\n\n        this.generateField = this.generateField.bind(this);\n        this.getFieldWithActiveTetromino = this.getFieldWithActiveTetromino.bind(this);\n        this.removeLines = this.removeLines.bind(this);\n        this.calculateScore = this.calculateScore.bind(this);\n        this.getCurrentLevel = this.getCurrentLevel.bind(this);\n        this.getActiveTetrominoShape = this.getActiveTetrominoShape.bind(this);\n        this.getNextTetrominoShape = this.getNextTetrominoShape.bind(this);\n        this.getRandomTetromino = this.getRandomTetromino.bind(this);\n        this.createTetromino = this.createTetromino.bind(this);\n        this.getBufferLeft = this.getBufferLeft.bind(this);\n        this.getBufferRight = this.getBufferRight.bind(this);\n        this.getBufferDown = this.getBufferDown.bind(this);\n        this.moveLeft = this.moveLeft.bind(this);\n        this.moveRight = this.moveRight.bind(this);\n        this.moveDown = this.moveDown.bind(this);\n        this.rotateLeft = this.rotateLeft.bind(this);\n        this.rotateRight = this.rotateRight.bind(this);\n        this.shiftTetromino = this.shiftTetromino.bind(this);\n        this.hasOverlaps = this.hasOverlaps.bind(this);\n        this.keyPressed = this.keyPressed.bind(this);\n        this.getFramesPerLevel = this.getFramesPerLevel.bind(this);\n        this.processFrame = this.processFrame.bind(this);\n        this.play = this.play.bind(this);\n        this.stop = this.stop.bind(this);\n        this.pause = this.pause.bind(this);\n        this.adjustFieldSize = this.adjustFieldSize.bind(this);\n        this.adjustNextTetrominoSize = this.adjustNextTetrominoSize.bind(this);\n\n        this.tetrisElement = React.createRef<HTMLElement>();\n\n        this.state = {\n            burn: 0,\n            field: this.generateField(),\n            iago: 0,\n            level: props.startLevel,\n            lines: 0,\n            nextTetromino: null,\n            paused: true,\n            score: 0,\n            tetrisLines: 0,\n            tetromino: null,\n        };\n    }\n\n    private generateField(): TetrominoShape {\n\n        const { fieldHeight, fieldWidth } = this.props;\n        return new Array(fieldHeight).fill(undefined).map(\n            (): null[] => (new Array(fieldWidth)).fill(null)\n        );\n    }\n\n    private getFieldWithActiveTetromino(): TetrominoShape {\n\n        const { field, tetromino } = this.state;\n\n        if (tetromino === null) {\n\n            return field;\n        }\n\n        const tetrominoShape: TetrominoShape = this.getActiveTetrominoShape();\n\n        return field.map(\n            (line: (Tetrominos | null)[], lineIndex: number): (Tetrominos | null)[] => (\n                line.map(\n                    (cell: Tetrominos | null, cellIndex: number): Tetrominos | null => {\n\n                        if (cell !== null) {\n\n                            return cell;\n                        }\n\n                        if (lineIndex >= tetromino.y && lineIndex < tetromino.y + tetrominoShape.length) {\n                            if (cellIndex >= tetromino.x && cellIndex < tetromino.x + tetrominoShape[lineIndex - tetromino.y].length) {\n\n                                return tetrominoShape[lineIndex - tetromino.y][cellIndex - tetromino.x];\n                            }\n                        }\n\n                        return null;\n                    }\n                )\n            ),\n        );\n    }\n\n    private removeLines(field: TetrominoShape): { burn: number, field: TetrominoShape, lines: number, level: number, tetrisLines: number, score: number } {\n\n        const emptyField: TetrominoShape = this.generateField();\n        const fieldLines: TetrominoShape = field.filter((line: any[]): boolean => !line.every((cell: any): boolean => cell !== null));\n\n        const { startLevel } = this.props;\n        const { burn, lines, tetrisLines, score } = this.state;\n\n        const removedLines = FIELD_HEIGHT - fieldLines.length;\n        const updatedField = [ ...emptyField, ...fieldLines ].reverse().slice(0, FIELD_HEIGHT).reverse();\n        const updatedLines = lines + removedLines;\n        const updatedTetrisLines = removedLines === 4 ? tetrisLines + removedLines : tetrisLines;\n        const updatedLevel = this.getCurrentLevel(startLevel, updatedLines);\n        const updatedScore = score + this.calculateScore(updatedLevel, removedLines);\n\n        return {\n            burn: removedLines ? removedLines === 4 ? 0 : burn + removedLines : burn,\n            field: updatedField,\n            lines: updatedLines,\n            level: updatedLevel,\n            tetrisLines: updatedTetrisLines,\n            score: updatedScore,\n        };\n    }\n\n    private calculateScore(level: number, lines: number): number {\n\n        if (lines === 0) {\n\n            return 0;\n        }\n\n        const baseScore: number =  SCORES[lines - 1];\n        return baseScore * (level + 1);\n    }\n\n    private getCurrentLevel(startLevel: number, lines: number): number {\n\n        const a: number = startLevel * 10 + 10;\n        const b: number = Math.max(100, startLevel * 10 - 50);\n        const increasingNumber: number = Math.min(a, b);\n\n        const diference: number = lines - increasingNumber;\n        if (diference < 0) {\n\n            return startLevel;\n        }\n\n        return startLevel + Math.floor(diference / 10) + 1;\n    }\n\n    private getActiveTetrominoShape(): TetrominoShape {\n\n        const { tetromino } = this.state;\n\n        if (tetromino === null) {\n\n            return NULL_SHAPE;\n        }\n\n        return TETROMINOS[tetromino.type][tetromino.state];\n    }\n\n    private getNextTetrominoShape(): TetrominoShape {\n\n        const { nextTetromino } = this.state;\n\n        if (nextTetromino === null) {\n\n            return NULL_SHAPE;\n        }\n\n        return TETROMINOS[nextTetromino][0].filter((line: (Tetrominos | null)[], index: number): boolean => index < 2);\n    }\n\n    private getRandomTetromino(): Tetrominos {\n\n        return Math.floor(Math.random() * TETROMINOS_COUNT);\n    }\n\n    private createTetromino(type: Tetrominos): ActiveTetromino {\n\n        return {\n            type,\n            state: 0,\n            x: 3,\n            y: 0,\n        };\n    }\n\n    private getBufferLeft(shape: TetrominoShape): number {\n\n        return shape.reduce(\n            (acc: number, line: (Tetrominos | null)[]): number => {\n                const offset: number = line.findIndex(\n                    (cell: Tetrominos | null): boolean => cell !== null,\n                );\n                if (offset === -1) {\n                    return acc;\n                }\n                return Math.min(acc, offset);\n            },\n            TETROMINOS_SHAPE_SIZE,\n        );\n    }\n\n    private getBufferRight(shape: TetrominoShape): number {\n\n        return shape.reduce(\n            (acc: number, line: (Tetrominos | null)[]): number => {\n                const offset: number = [...line].reverse().findIndex(\n                    (cell: Tetrominos | null): boolean => cell !== null,\n                );\n                if (offset === -1) {\n                    return acc;\n                }\n                return Math.min(acc, offset);\n            },\n            TETROMINOS_SHAPE_SIZE,\n        );\n    }\n\n    private getBufferDown(shape: TetrominoShape): number {\n\n        let buffer: number = 0;\n        for (let i = shape.length - 1; i >= 0; i -= 1) {\n            const line: (Tetrominos | null)[] = shape[i];\n            if (line.findIndex((cell: Tetrominos | null): boolean => cell !== null) !== -1) {\n                break;\n            }\n\n            buffer += 1;\n        }\n        return buffer;\n    }\n\n    private moveLeft(): void {\n\n        this.setState(\n            (prevState: Readonly<TetrisState>, props: Readonly<TetrisProps>): Pick<TetrisState, 'tetromino'> => {\n\n                if (prevState.tetromino === null) {\n\n                    return prevState;\n                }\n\n                const tetromino: ActiveTetromino = {\n                    ...prevState.tetromino!\n                };\n\n                const shape: TetrominoShape = this.getActiveTetrominoShape();\n                const availableBuffer: number = this.getBufferLeft(shape);\n\n                if ((tetromino.x + availableBuffer) > 0) {\n\n                    tetromino.x -= 1;\n                }\n\n                if (this.hasOverlaps(tetromino)) {\n\n                    return prevState;\n                }\n\n                return { tetromino };\n            },\n        );\n    }\n\n    private moveRight(): void {\n\n        this.setState(\n            (prevState: Readonly<TetrisState>, props: Readonly<TetrisProps>): Pick<TetrisState, 'tetromino'> => {\n\n                if (prevState.tetromino === null) {\n\n                    return prevState;\n                }\n\n                const tetromino: ActiveTetromino = {\n                    ...prevState.tetromino!\n                };\n\n                const shape: TetrominoShape = this.getActiveTetrominoShape();\n                const availableBuffer: number = this.getBufferRight(shape);\n\n                if (tetromino.x < (props.fieldWidth + availableBuffer - TETROMINOS_SHAPE_SIZE)) {\n\n                    tetromino.x += 1;\n                }\n\n                if (this.hasOverlaps(tetromino)) {\n\n                    return prevState;\n                }\n\n                return { tetromino };\n            },\n        );\n    }\n\n    private moveDown(): void {\n\n        this.setState(\n            (prevState: Readonly<TetrisState>, props: Readonly<TetrisProps>): Pick<TetrisState, 'field' | 'tetromino'> => {\n\n                if (prevState.tetromino === null) {\n\n                    return prevState;\n                }\n\n                const tetromino: ActiveTetromino = {\n                    ...prevState.tetromino!\n                };\n\n                const shape: TetrominoShape = this.getActiveTetrominoShape();\n                const availableBuffer: number = this.getBufferDown(shape);\n\n                if (((props.fieldHeight + availableBuffer) - (tetromino.y + TETROMINOS_SHAPE_SIZE) - 1) >= 0) {\n\n                    tetromino.y += 1;\n                } else {\n\n                    return {\n                        ...this.removeLines(this.getFieldWithActiveTetromino()),\n                        tetromino: null,\n                    };\n                }\n\n                if (this.hasOverlaps(tetromino)) {\n\n                    return {\n                        ...this.removeLines(this.getFieldWithActiveTetromino()),\n                        tetromino: null,\n                    };\n                }\n\n                return {\n                    field: prevState.field,\n                    tetromino\n                };\n            },\n        );\n    }\n\n    private rotateLeft(): void {\n\n        this.setState(\n            (prevState: Readonly<TetrisState>, props: Readonly<TetrisProps>): Pick<TetrisState, 'tetromino'> => {\n\n                if (prevState.tetromino === null) {\n\n                    return prevState;\n                }\n\n                let tetromino: ActiveTetromino = {\n                    ...prevState.tetromino!\n                };\n\n                const lastShape: number = TETROMINOS[tetromino.type].length - 1;\n                tetromino.state = tetromino.state === 0 ? lastShape : tetromino.state - 1;\n\n                tetromino = this.shiftTetromino(tetromino);\n                if (this.hasOverlaps(tetromino)) {\n\n                    return prevState;\n                }\n\n                return { tetromino };\n            },\n        );\n    }\n\n    private rotateRight(): void {\n\n        this.setState(\n            (prevState: Readonly<TetrisState>, props: Readonly<TetrisProps>): Pick<TetrisState, 'tetromino'> => {\n\n                if (prevState.tetromino === null) {\n\n                    return prevState;\n                }\n\n                let tetromino: ActiveTetromino = {\n                    ...prevState.tetromino!\n                };\n\n                const lastShape: number = TETROMINOS[tetromino.type].length - 1;\n                tetromino.state = tetromino.state === lastShape ? 0 : tetromino.state + 1;\n\n                tetromino = this.shiftTetromino(tetromino);\n                if (this.hasOverlaps(tetromino)) {\n\n                    return prevState;\n                }\n\n                return { tetromino };\n            },\n        );\n    }\n\n    private shiftTetromino(tetromino: ActiveTetromino): ActiveTetromino {\n\n        const { fieldWidth } = this.props;\n        const shape: TetrominoShape = TETROMINOS[tetromino.type][tetromino.state];\n\n        const leftBuffer: number = this.getBufferLeft(shape);\n        if ((tetromino.x + leftBuffer) < 0) {\n\n            tetromino.x = 0;\n        }\n\n        const rightBuffer: number = this.getBufferRight(shape);\n        if (tetromino.x > (fieldWidth + rightBuffer - TETROMINOS_SHAPE_SIZE)) {\n\n            tetromino.x = fieldWidth + rightBuffer - TETROMINOS_SHAPE_SIZE;\n        }\n\n        return tetromino;\n    }\n\n    private hasOverlaps(tetromino: ActiveTetromino) {\n\n        const { field } = this.state;\n        const shape: TetrominoShape = TETROMINOS[tetromino.type][tetromino.state];\n\n        for (let i = 0, li = shape.length; i < li; i += 1) {\n            for (let j = 0, lj = shape[i].length; j < lj; j += 1) {\n\n                if (shape[i][j] === null) {\n\n                    continue;\n                }\n\n                const fieldCell: Tetrominos | null = field[tetromino.y + i][tetromino.x + j];\n                if (fieldCell === null || fieldCell === undefined) {\n\n                    continue;\n                }\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private keyPressed(event: KeyboardEvent): void {\n\n        const { paused } = this.state;\n\n        if (paused && event.keyCode !== Keys.ENTER && event.keyCode !== Keys.SELECT) {\n            return;\n        }\n\n        switch (event.keyCode) {\n\n            case Keys.LEFT:\n                this.moveLeft();\n                break;\n\n            case Keys.RIGHT:\n                this.moveRight();\n                break;\n\n            case Keys.UP:\n                this.rotateRight();\n                break;\n\n            case Keys.DOWN:\n                this.moveDown();\n                break;\n\n            case Keys.ROTATE_LEFT:\n                this.rotateLeft();\n                break;\n\n            case Keys.ROTATE_RIGHT:\n                this.rotateRight();\n                break;\n\n            case Keys.SELECT:\n                break;\n\n            case Keys.ENTER:\n                this.pause();\n                break;\n\n            default:\n                break;\n        }\n    }\n\n    private getFramesPerLevel(level: number): number {\n\n        if (level === 0) return 48;\n        if (level === 1) return 43;\n        if (level === 2) return 38;\n        if (level === 3) return 33;\n        if (level === 4) return 28;\n        if (level === 5) return 23;\n        if (level === 6) return 18;\n        if (level === 7) return 13;\n        if (level === 8) return 8;\n        if (level === 9) return 6;\n        if (level >= 10 && level <= 12) return 5;\n        if (level >= 13 && level <= 15) return 4;\n        if (level >= 16 && level <= 18) return 3;\n        if (level >= 19 && level <= 28) return 2;\n        if (level >= 29) return 1;\n\n        return 60;\n    }\n\n    private processFrame(): void {\n\n        const { level, paused } = this.state;\n\n        this.framesCount += 1;\n        const framesLimit: number = this.getFramesPerLevel(level);\n\n        if (this.framesCount >= framesLimit) {\n\n            this.framesCount = 0;\n            this.moveDown();\n            this.play();\n        } else if (paused === false) {\n\n            requestAnimationFrame(this.processFrame);\n        }\n    }\n\n    private play(): void {\n\n        const { paused, tetromino } = this.state;\n\n        if (paused === true) {\n\n            this.setState(\n                (prevState: Readonly<TetrisState>, props: Readonly<TetrisProps>): Pick<TetrisState, 'paused'> => ({\n                    paused: false,\n                }),\n            );\n        }\n\n        if (tetromino === null) {\n\n            this.setState(\n                (prevState: Readonly<TetrisState>, props: Readonly<TetrisProps>): Pick<TetrisState, 'nextTetromino' & 'paused' & 'tetromino'> => {\n\n                    const newTetromino: ActiveTetromino = this.createTetromino(\n                        prevState.nextTetromino === null\n                            ? this.getRandomTetromino()\n                            : prevState.nextTetromino,\n                    );\n\n                    return {\n                        iago: newTetromino.type === Tetrominos.I ? 0 : prevState.iago + 1,\n                        nextTetromino: this.getRandomTetromino(),\n                        paused: this.hasOverlaps(newTetromino),\n                        tetromino: newTetromino,\n                    };\n                },\n            );\n        }\n\n        requestAnimationFrame(this.processFrame);\n    }\n\n    private stop(): void {\n\n        this.setState(\n            (prevState: Readonly<TetrisState>, props: Readonly<TetrisProps>): Pick<TetrisState, 'paused'> => ({\n                paused: true,\n            }),\n        );\n    }\n\n    private pause(): void {\n\n        const { paused } = this.state;\n\n        if (paused) {\n            this.play();\n        } else {\n            this.stop();\n        }\n    }\n\n    private adjustFieldSize(height: number, width: number): { height: number | null, width: number | null } {\n\n        return {\n            height: null,\n            width: height / FIELD_HEIGHT * FIELD_WIDTH,\n        };\n    }\n\n    private adjustNextTetrominoSize(height: number, width: number): { height: number | null, width: number | null } {\n\n        return {\n            height: width / 2,\n            width: null,\n        }\n    }\n\n    public componentDidMount(): void {\n\n        window.addEventListener('keydown', this.keyPressed);\n    }\n\n    public componentWillUnmount(): void {\n\n        this.stop();\n\n        window.removeEventListener('keydown', this.keyPressed);\n    }\n\n    public render(): React.ReactNode {\n\n        const { burn, iago, level, lines, tetrisLines, score } = this.state;\n\n        const trate: number = lines ? Math.round((tetrisLines / lines) * 100) : lines;\n\n        return (\n            <section className='tetris' ref={this.tetrisElement}>\n                <section className='tetris-main-section'>\n                    <TetrisBox flex={true} adjustSize={this.adjustFieldSize}>\n                        <TetrisField field={this.getFieldWithActiveTetromino()} />\n                    </TetrisBox>\n                    <TetrisBox>\n                        <TetrisWins />\n                    </TetrisBox>\n                </section>\n                <aside>\n                    <TetrisScore score={score} />\n                    <TetrisNext tetromino={this.getNextTetrominoShape()} />\n                    <TetrisLevel level={level} />\n                    <TetrisLines lines={lines} />\n                    <TetrisRate burn={burn} iago={iago} rate={trate} />\n                </aside>\n            </section>\n        );\n    }\n}\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { Tetrominos, TetrominoShape } from '../../../../constants';\nimport './style.css';\n\nexport interface TetrisFieldProps {\n    field: TetrominoShape;\n}\n\nexport default class TetrisField extends React.PureComponent<TetrisFieldProps> {\n\n    public render(): React.ReactNode {\n\n        const { field } = this.props;\n\n        return (\n            <table\n                className='tetris-field'\n                cellSpacing={0}\n                cellPadding={0}\n            >\n                <tbody>\n                    {\n                        field.map((line: (Tetrominos | null)[], lineIndex: number): React.ReactNode => (\n                            <tr key={`line${lineIndex}`} className='tetris-field-line'>\n                                {\n                                    line.map((cell: Tetrominos | null, cellIndex: number): React.ReactNode => {\n\n                                        const key: string = `${lineIndex}x${cellIndex}`;\n\n                                        const cellClassName: string = classNames({\n                                            'tetris-field-cell': true,\n                                            'cell-i': cell === Tetrominos.I,\n                                            'cell-j': cell === Tetrominos.J,\n                                            'cell-l': cell === Tetrominos.L,\n                                            'cell-o': cell === Tetrominos.O,\n                                            'cell-s': cell === Tetrominos.S,\n                                            'cell-t': cell === Tetrominos.T,\n                                            'cell-z': cell === Tetrominos.Z,\n                                            'cell-null': cell === null,\n                                        });\n\n                                        return <td key={key} className={cellClassName} />\n                                    })\n                                }\n                            </tr>\n                        ))\n                    }\n                </tbody>\n            </table>\n        );\n    }\n}\n","import * as React from 'react';\nimport './styles.css';\n\nexport default class TetrisWins extends React.PureComponent {\n\n    public render(): React.ReactNode {\n        return (\n            <section className='tetris-wins'>\n                <span role=\"img\" aria-label=\"life\">❤️❤️❤️</span>\n            </section>\n        );\n    }\n}\n","import * as React from 'react';\nimport './styles.css';\n\nexport interface TetrisBoxProps {\n    adjustSize?: (height: number, width: number) => TetrisBoxState;\n    color?: string;\n    flex?: boolean;\n}\n\nexport interface TetrisBoxState {\n    height: number | null;\n    width: number | null;\n}\n\nexport default class TetrisBox extends React.PureComponent<TetrisBoxProps, TetrisBoxState> {\n\n    private readonly tetrisBoxElement: React.RefObject<HTMLElement>;\n\n    constructor(props: Readonly<TetrisBoxProps>) {\n\n        super(props);\n\n        this.updateDimensions = this.updateDimensions.bind(this);\n\n        this.tetrisBoxElement = React.createRef<HTMLElement>();\n\n        this.state = {\n            height: null,\n            width: null,\n        }\n    }\n\n    private updateDimensions(): void {\n\n        this.setState(\n            (prevState: Readonly<TetrisBoxState>, props: Readonly<TetrisBoxProps>): TetrisBoxState => {\n\n                const tetrisBoxElement: HTMLElement | null = this.tetrisBoxElement.current;\n                if (tetrisBoxElement === null || props.adjustSize === undefined) {\n\n                    return prevState;\n                }\n\n                const style: CSSStyleDeclaration = window.getComputedStyle(tetrisBoxElement, null);\n                const computedHeight: number = parseInt(style.getPropertyValue('height'));\n                const computedWidth: number = parseInt(style.getPropertyValue('width'));\n\n                return props.adjustSize(computedHeight, computedWidth);\n            },\n        );\n    }\n\n    public componentDidMount(): void {\n\n        this.updateDimensions();\n        window.addEventListener('resize', this.updateDimensions);\n    }\n\n    public componentWillUnmount(): void {\n\n        window.removeEventListener('resize', this.updateDimensions);\n    }\n\n    public render(): React.ReactElement<HTMLTableSectionElement> {\n\n        const { color, flex } = this.props;\n        const { height, width } = this.state;\n\n        const style = {\n            color,\n            borderColor: color,\n            flex: flex === true ? 1 : 0,\n            height: height || undefined,\n            width: width || undefined,\n        }\n\n        return (\n            <section\n                className='tetris-box'\n                style={style}\n                ref={this.tetrisBoxElement}\n            >\n                {this.props.children}\n            </section>\n        );\n    }\n}\n","import * as React from 'react';\nimport TetrisBox from '../box';\n\nexport interface TetrisScoreProps {\n    score: number;\n}\n\nexport default class TetrisScore extends React.PureComponent<TetrisScoreProps> {\n\n    public render(): React.ReactNode {\n\n        const { score } = this.props;\n        return (\n            <TetrisBox>\n                <p>SCORE</p>\n                <p>{String.prototype.padStart.call(score >= 999999 ? 999999 : score, 6, '0')}</p>\n            </TetrisBox>\n        );\n    }\n}\n","import * as React from 'react';\nimport TetrisBox from '../box';\n\nexport interface TetrisLinesProp {\n    lines: number;\n}\n\nexport default class TetrisLines extends React.PureComponent<TetrisLinesProp> {\n\n    public render(): React.ReactNode {\n\n        const { lines } = this.props;\n        return (\n            <TetrisBox>\n                <p>LINES</p>\n                <p>{String.prototype.padStart.call(lines >= 999 ? 999 : lines, 3, '0')}</p>\n            </TetrisBox>\n        );\n    }\n}\n","import * as React from 'react';\nimport TetrisBox from '../box';\n\nexport interface TetrisLevelProps {\n    level: number;\n}\n\nexport default class TetrisLevel extends React.PureComponent<TetrisLevelProps> {\n\n    public render(): React.ReactNode {\n\n        const { level } = this.props;\n        return (\n            <TetrisBox>\n                <p>LEVEL</p>\n                <p>{String.prototype.padStart.call(level >= 99 ? 99 : level, 2, '0')}</p>\n            </TetrisBox>\n        );\n    }\n}\n","import * as React from 'react';\nimport TetrisField from '../field';\nimport { TetrominoShape } from '../../../../constants';\nimport TetrisBox from '../box';\n\nexport interface TetrisNextProp {\n    tetromino: TetrominoShape;\n}\n\nexport default class TetrisNext extends React.PureComponent<TetrisNextProp> {\n\n    public render(): React.ReactNode {\n\n        const { tetromino } = this.props;\n        return (\n            <TetrisBox>\n                <p>NEXT</p>\n                <TetrisField field={tetromino} />\n                <div style={{ marginTop: '50%' }}>\n\n                </div>\n            </TetrisBox>\n        );\n    }\n}\n","import * as React from 'react';\nimport TetrisBox from '../box';\n\nexport interface TetrisRateProp {\n    burn: number;\n    iago: number;\n    rate: number;\n}\n\nexport default class TetrisRate extends React.PureComponent<TetrisRateProp> {\n\n    public render(): React.ReactNode {\n\n        const { burn, iago, rate } = this.props;\n\n        if (iago > 12) {\n\n            return (\n                <TetrisBox color='#ff0000'>\n                    <p>I AGO</p>\n                    <p>{String.prototype.padStart.call(iago, 3, '0')}</p>\n                </TetrisBox>\n            );\n        }\n\n        if (burn > 0) {\n\n            return (\n                <TetrisBox>\n                    <p>BURN</p>\n                    <p>{String.prototype.padStart.call(burn, 3, '0')}</p>\n                </TetrisBox>\n            );\n        }\n\n        return (\n            <TetrisBox>\n                <p>TRATE</p>\n                <p>{`${String.prototype.padStart.call(rate, 2, '0')}%`}</p>\n            </TetrisBox>\n        );\n    }\n}\n","import React from 'react';\nimport Tetris from './components/tetris';\nimport './App.css';\nimport { FIELD_HEIGHT, FIELD_WIDTH } from './constants';\n\nconst App: React.FC = () => {\n  return (\n    <main className='app'>\n      <Tetris\n        fieldHeight={FIELD_HEIGHT}\n        fieldWidth={FIELD_WIDTH}\n        startLevel={0}\n      />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}